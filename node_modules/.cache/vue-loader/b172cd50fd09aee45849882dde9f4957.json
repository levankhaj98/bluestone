{"remainingRequest":"C:\\Users\\lekhai\\Desktop\\bluestone\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\lekhai\\Desktop\\bluestone\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\lekhai\\Desktop\\bluestone\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lekhai\\Desktop\\bluestone\\src\\components\\StickyHeader.vue?vue&type=template&id=6f6231f4&scoped=true&","dependencies":[{"path":"C:\\Users\\lekhai\\Desktop\\bluestone\\src\\components\\StickyHeader.vue","mtime":1614132896256},{"path":"C:\\Users\\lekhai\\Desktop\\bluestone\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lekhai\\Desktop\\bluestone\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\lekhai\\Desktop\\bluestone\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lekhai\\Desktop\\bluestone\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}